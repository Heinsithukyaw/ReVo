# reVoAgent Consolidated Docker Compose - Single Source of Truth
# This replaces all other docker-compose files to eliminate conflicts
# Ports are standardized according to config/ports.yaml

version: '3.8'

services:
  # Backend Service
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
      target: production
    container_name: revoagent-backend
    ports:
      - "12001:12001"  # Standardized backend port
    environment:
      - REVOAGENT_MODE=production
      - PORT=12001
      - CORS_ORIGINS=http://localhost:12000,https://work-1-hnniweburjrfvvzu.prod-runtime.all-hands.dev,https://work-2-hnniweburjrfvvzu.prod-runtime.all-hands.dev
      - DATABASE_URL=postgresql://revoagent:revoagent@postgres:5432/revoagent
      - REDIS_URL=redis://redis:6379
    volumes:
      - ./config:/app/config:ro
      - ./logs:/app/logs
      - backend_data:/app/data
    depends_on:
      - postgres
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:12001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - revoagent-network

  # Frontend Service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
    container_name: revoagent-frontend
    ports:
      - "12000:12000"  # Standardized frontend port
    environment:
      - NODE_ENV=production
      - VITE_API_URL=http://localhost:12001
      - VITE_WS_URL=ws://localhost:12001
      - PORT=12000
    volumes:
      - ./frontend/dist:/app/dist:ro
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:12000"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - revoagent-network

  # Database
  postgres:
    image: postgres:15-alpine
    container_name: revoagent-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=revoagent
      - POSTGRES_USER=revoagent
      - POSTGRES_PASSWORD=revoagent
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U revoagent -d revoagent"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - revoagent-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: revoagent-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf:ro
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped
    networks:
      - revoagent-network

  # Model Server (Local LLMs)
  model-server:
    image: ghcr.io/ggerganov/llama.cpp:server
    container_name: revoagent-model-server
    ports:
      - "8080:8080"
    volumes:
      - ./models:/models:ro
    environment:
      - MODEL_PATH=/models/deepseek-r1.gguf
    command: >
      --server
      --host 0.0.0.0
      --port 8080
      --model /models/deepseek-r1.gguf
      --ctx-size 4096
      --threads 4
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - revoagent-network

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: revoagent-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - revoagent-network

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: revoagent-grafana
    ports:
      - "3001:3000"  # Avoid conflict with frontend
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=revoagent
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - revoagent-network

  # Reverse Proxy (Optional - for production)
  nginx:
    image: nginx:alpine
    container_name: revoagent-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
    restart: unless-stopped
    networks:
      - revoagent-network

# Volumes
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# Networks
networks:
  revoagent-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16